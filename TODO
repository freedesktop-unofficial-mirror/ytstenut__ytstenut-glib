TODO

* ytsg_client_connect_to_mesh() -> ytsg_client_connect()
* Need to pass jid, or better sending service, with received message.
* Roster should be created with _new() instead of _get() from client.
* Should send-file really be with YtsgContact? Why not Service? Which service is receiving the file?
* Get rid of --enable-docs and adhere to --enable-gtk-doc only.
* Add checking and error reporting when service name doesn't conform when creating YtsgClient.
* ytsg_client_set_status_by_capability() is not in the docs.
* Add "services" property to Contact.
* Should allow xml inside messages?
* There should be a common (abstract?) base-class that YtsgMetadata and YtsgInvocationMessage etc derive from -- YtsgDatagram probably.
* YtsgService should maybe be YtsgRemoteService.
* The pc file name should contain the API version.
* Look at using xml-rpc
* Globally rename "com.meego.xpmn.ytstenut" to "org.freedesktop.ytstenut".
* It probably doesn't work when capabilities are added after connecting the client. Fix it.
* Publish capabilities in "names", instead of using the profile as UID.
* Implement generic service proxy and replace MetadataService with it.
* Implement capabilities boxed type and use it everywhere.
* Implement error message handling on the client side, or do away with it altogether, or maybe rename to exception. Or maybe just make it an event?
* Use exported symbols list when linking and generate sections.txt from it and, say, sections.txt.in, using "ytsg_client_*" and the like.
* Merge Event and Response classes, and use them instead of InvocationData, so they just need to be filled and sent out.
* Maybe the message class should be initially unowned as well.
* ServiceAdapater and Proxy classes should probably be abstract, maybe have a generic implementation subclass one day.

Code Review
-----------

+ Consistent naming: jid ... contact_id; sid/uid ... service_id; caps ... capabilities (do away with the quarks)
+ Use "FooBar * const" when not handing out references
+ Coding style.
+ Create -protected headers for internal methods
