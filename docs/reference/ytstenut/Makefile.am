## Process this file with automake to produce Makefile.in

# We require automake 1.6 at least.
AUTOMAKE_OPTIONS = 1.6

# The name of the module, e.g. 'glib'.
DOC_MODULE=ytstenut

# Uncomment for versioned docs and specify the version of the module, e.g. '2'.
#DOC_MODULE_VERSION=$(YTS_VERSION)


# The top-level SGML file. You can change this if you want to.
DOC_MAIN_SGML_FILE=$(DOC_MODULE)-docs.xml

# Directories containing the source code, relative to $(srcdir).
DOC_SOURCE_DIR = $(abs_top_srcdir)/ytstenut

# Extra options to pass to gtkdoc-scangobj. Not normally needed.
SCANGOBJ_OPTIONS=

# Extra options to supply to gtkdoc-scan.
# e.g. SCAN_OPTIONS=--deprecated-guards="GTK_DISABLE_DEPRECATED"
SCAN_OPTIONS=--rebuild-types --rebuild-sections

# Extra options to supply to gtkdoc-mkdb.
# e.g. MKDB_OPTIONS=--sgml-mode --output-format=xml
MKDB_OPTIONS=--sgml-mode --output-format=xml

# Extra options to supply to gtkdoc-mktmpl
# e.g. MKTMPL_OPTIONS=--only-section-tmpl
MKTMPL_OPTIONS=

# Extra options to supply to gtkdoc-mkhtml
MKHTML_OPTIONS=

# Extra options to supply to gtkdoc-fixref. Not normally needed.
# e.g. FIXXREF_OPTIONS=--extra-dir=../gdk-pixbuf/html --extra-dir=../gdk/html
FIXXREF_OPTIONS =

# Used for dependencies. The docs will be rebuilt if any of these change.
# e.g. HFILE_GLOB=$(top_srcdir)/gtk/*.h
# e.g. CFILE_GLOB=$(top_srcdir)/gtk/*.c
HFILE_GLOB = $(top_srcdir)/ytstenut/*.h

CFILE_GLOB = $(top_srcdir)/ytstenut/*.c

# Extra header to include when scanning, which are not under DOC_SOURCE_DIR
# e.g. EXTRA_HFILES=$(top_srcdir}/contrib/extra.h
EXTRA_HFILES=

# Header files to ignore when scanning. Use base file name, no paths
# e.g. IGNORE_HFILES=gtkdebug.h gtkintl.h
IGNORE_HFILES = \
  ytstenut-internal.h \
  yts-adapter-factory.h \
  yts-client-internal.h \
  yts-client-status.h \
  yts-contact-impl.h \
  yts-contact-internal.h \
  yts-error.h \
  yts-error-message.h \
  yts-event-message.h \
  yts-factory.h \
  yts-incoming-file-internal.h \
  yts-invocation-message.h \
  yts-marshal.h \
  yts-message.h \
  yts-metadata.h \
  yts-metadata-internal.h \
  yts-outgoing-file-internal.h \
  yts-profile-adapter.h \
  yts-profile.h \
  yts-profile-impl.h \
  yts-profile-proxy.h \
  yts-proxy-factory.h \
  yts-proxy-internal.h \
  yts-proxy-service-impl.h \
  yts-proxy-service-internal.h \
  yts-response-message.h \
  yts-roster-impl.h \
  yts-roster-internal.h \
  yts-service-adapter.h \
  yts-service-emitter.h \
  yts-service-factory.h \
  yts-service-impl.h \
  yts-service-internal.h \
  yts-xml.h \
  \
  yts-vp-playable-proxy.h \
  yts-vp-player-adapter.h \
  yts-vp-player-proxy.h \
  yts-vp-transcript-adapter.h \
  yts-vp-transcript-proxy.h \
  $(NULL)

# Images to copy into HTML directory.
# e.g. HTML_IMAGES=$(top_srcdir)/gtk/stock-icons/stock_about_24.png
HTML_IMAGES=

# Extra SGML files that are included by $(DOC_MAIN_SGML_FILE).
# e.g. content_files=running.sgml building.sgml changes-2.0.sgml
content_files=

# SGML files where gtk-doc abbrevations (#GtkWidget) are expanded
# These files must be listed here *and* in content_files
# e.g. expand_content_files=running.sgml
expand_content_files=

# CFLAGS and LDFLAGS for compiling gtkdoc-scangobj with your library.
# Only needed if you are using gtkdoc-scangobj to dynamically query widget
# signals and properties.
# e.g. GTKDOC_CFLAGS=-I$(top_srcdir) -I$(top_builddir) $(GTK_DEBUG_FLAGS)
# e.g. GTKDOC_LIBS=$(top_builddir)/gtk/$(gtktargetlib)
GTKDOC_CFLAGS=-I$(top_srcdir)/ytstenut $(YTS_CFLAGS)
GTKDOC_LIBS=$(top_builddir)/ytstenut/libytstenut-@YTS_API_VERSION@.la $(YTS_LIBS)

# This includes the standard gtk-doc make rules, copied by gtkdocize.
include $(top_srcdir)/gtk-doc.make

# Other files to distribute
# e.g. EXTRA_DIST += version.xml.in
EXTRA_DIST +=

# Files not to distribute
# for --rebuild-types in $(SCAN_OPTIONS), e.g. $(DOC_MODULE).types
# for --rebuild-sections in $(SCAN_OPTIONS) e.g. $(DOC_MODULE)-sections.txt
DISTCLEANFILES = $(DOC_MODULE).types $(DOC_MODULE)-sections.txt

GITIGNOREFILES = \
  ytstenut-overrides.txt \
  $(NULL)

# Comment this out if you want your docs-status tested during 'make check'
if BUILD_GTK_DOC
#TESTS_ENVIRONMENT = cd $(srcsrc) &&
#TESTS = $(GTKDOC_CHECK)
endif

check-local:
	$(AM_V_GEN) b=`tput bold` && \
	n=`tput sgr0` && \
	for f in $(IGNORE_HFILES); do \
		if [ "`find $(DOC_SOURCE_DIR) -name $${f}`" = "" ]; then \
			echo "$${b}Error: $${f} is ignored but not found anyway.$${n}"; \
			exit 1; \
		fi \
	done

-include $(top_srcdir)/git.mk
